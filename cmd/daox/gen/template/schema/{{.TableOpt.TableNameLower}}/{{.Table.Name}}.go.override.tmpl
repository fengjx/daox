// Code generated by "daox"; DO NOT EDIT.
package {{.TableOpt.TableNameLower}}

import (
	"github.com/fengjx/daox/v2/sqlbuilder"
	"github.com/fengjx/daox/v2/sqlbuilder/ql"
	{{$ilen := len .Table.GoImports}}
{{if gt $ilen 0}}
    {{range .Table.GoImports}}"{{.}}"{{end}}
{{end}}
)

const (
	TableName     = "{{.Table.Name}}"
	{{- range .Table.Columns}}
	{{GonicCase .Name}}Field = "{{.Name}}"
	{{- end}}
)

var Meta = {{GonicCase .Table.StructName}}Meta{}

// {{.Table.StructName}}M {{.Table.Comment}}
type {{GonicCase .Table.StructName}}Meta struct {
}

func (m {{GonicCase .Table.StructName}}Meta) TableName() string {
	return TableName
}

func (m {{GonicCase .Table.StructName}}Meta) IsAutoIncrement() bool {
	return {{.Table.AutoIncrement}}
}

func (m {{GonicCase .Table.StructName}}Meta) PrimaryKey() string {
	return "{{.Table.PrimaryKey.Name}}"
}

func (m {{GonicCase .Table.StructName}}Meta) Columns() []string {
	return []string{
		{{- range .Table.Columns}}
		"{{.Name}}",
		{{- end}}
	}
}

{{range .Table.Columns}}
{{$ColName := GonicCase .Name}}
{{$TColName := TitleCase .Name}}
func {{$TColName}}In(vals ...{{SQLType2GoTypeString .SQLType}}) sqlbuilder.Column {
	var args []any
    for _, val := range vals {
        args = append(args, val)
    }
    return ql.Col({{$ColName}}Field).In(args...)
}

func {{$TColName}}NotIn(vals ...{{SQLType2GoTypeString .SQLType}}) sqlbuilder.Column {
	var args []any
    for _, val := range vals {
        args = append(args, val)
    }
    return ql.Col({{$ColName}}Field).NotIn(args...)
}

func {{$TColName}}EQ(val {{SQLType2GoTypeString .SQLType}}) sqlbuilder.Column {
	return ql.Col({{$ColName}}Field).EQ(val)
}

func {{$TColName}}NotEQ(val {{SQLType2GoTypeString .SQLType}}) sqlbuilder.Column {
	return ql.Col({{$ColName}}Field).NotEQ(val)
}

func {{$TColName}}LT(val {{SQLType2GoTypeString .SQLType}}) sqlbuilder.Column {
	return ql.Col({{$ColName}}Field).LT(val)
}

func {{$TColName}}LTEQ(val {{SQLType2GoTypeString .SQLType}}) sqlbuilder.Column {
	return ql.Col({{$ColName}}Field).LTEQ(val)
}

func {{$TColName}}GT(val {{SQLType2GoTypeString .SQLType}}) sqlbuilder.Column {
	return ql.Col({{$ColName}}Field).GT(val)
}

func {{$TColName}}GTEQ(val {{SQLType2GoTypeString .SQLType}}) sqlbuilder.Column {
	return ql.Col({{$ColName}}Field).GTEQ(val)
}

func {{$TColName}}Like(val string) sqlbuilder.Column {
	return ql.Col({{$ColName}}Field).Like(val)
}

func {{$TColName}}NotLike(val string) sqlbuilder.Column {
	return ql.Col({{$ColName}}Field).NotLike(val)
}

func {{$TColName}}Desc() sqlbuilder.OrderBy {
	return ql.Desc({{$ColName}}Field)
}

func {{$TColName}}Asc() sqlbuilder.OrderBy {
	return ql.Asc({{$ColName}}Field)
}
{{end}}